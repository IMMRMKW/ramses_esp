name: Build ESP32 Firmware

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Build (fresh sdkconfig from defaults)
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.4.1
        target: esp32c6
        path: .
        command: >-
          rm -f sdkconfig && export SDKCONFIG_DEFAULTS=sdkconfig.defaults &&
          idf.py set-target esp32c6 && idf.py reconfigure && idf.py build

    - name: Create firmware package
      run: |
        set -e
        mkdir -p release
        # Identify app binary (exclude bootloader / partition / ota data)
        APP_BIN=$(ls build/*.bin | grep -v bootloader | grep -v partition | grep -v ota_data | head -n1)
        cp "$APP_BIN" release/
        cp build/bootloader/bootloader.bin release/
        cp build/partition_table/partition-table.bin release/
        [ -f build/ota_data_initial.bin ] && cp build/ota_data_initial.bin release/ || echo "No ota_data_initial.bin"
        if [ -f build/flash_args ]; then
          cp build/flash_args release/
          # Generate a concise manifest with flash command
          echo "Flash command (Linux/macOS):" > release/FLASH_MANIFEST.txt
          echo "python -m esptool --chip esp32c6 $(tr '\n' ' ' < build/flash_args)" >> release/FLASH_MANIFEST.txt
        fi
        echo "Generated files:" && ls -1 release

    - name: Merge full flash image
      run: |
        set -e
        if [ ! -f build/flash_args ]; then
          echo "flash_args not found; cannot create merged image" >&2
          exit 1
        fi
        pip install --no-cache-dir esptool
        mkdir -p release
        # Run merge inside build dir so relative paths in flash_args resolve
        (
          cd build
          python -m esptool --chip esp32c6 merge-bin -o ../release/full_flash.bin $(tr '\n' ' ' < flash_args)
        )
        # Produce checksum for integrity verification
        (sha256sum release/full_flash.bin || shasum -a 256 release/full_flash.bin) > release/full_flash.bin.sha256 || true
        # Append instructions to manifest if it exists
        if [ -f release/FLASH_MANIFEST.txt ]; then
          {
            echo ""; echo "Single-image flash (overwrites whole flash region set used here):"; \
            echo "python -m esptool --chip esp32c6 write_flash 0x0 full_flash.bin"; \
            echo "PowerShell (Windows): esptool.py --chip esp32c6 write_flash 0x0 .\\full_flash.bin"; \
          } >> release/FLASH_MANIFEST.txt
        fi
        ls -lh release/full_flash.bin

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32c6-firmware
        path: release/