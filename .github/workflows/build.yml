name: Build ESP32 Firmware

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Setup ESP-IDF toolchain
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.4.1
        target: esp32c6

    - name: Configure & Build (fresh sdkconfig from defaults)
      shell: bash
      run: |
        set -euo pipefail
        # Ensure IDF_PATH is set (action sets it inside its step; we re-derive if missing)
        export IDF_PATH=${IDF_PATH:-/opt/esp/idf}
        echo "Using IDF_PATH=$IDF_PATH"
        # Source the environment so idf.py is on PATH
        . "$IDF_PATH/export.sh"
        rm -f sdkconfig
        export SDKCONFIG_DEFAULTS=sdkconfig.defaults
        idf.py set-target esp32c6
        idf.py reconfigure
        idf.py build

    - name: Create firmware package
      run: |
        set -e
        mkdir -p release
        # Identify app binary (exclude bootloader / partition / ota data)
        APP_BIN=$(ls build/*.bin | grep -v bootloader | grep -v partition | grep -v ota_data | head -n1)
        cp "$APP_BIN" release/
        cp build/bootloader/bootloader.bin release/
        cp build/partition_table/partition-table.bin release/
        [ -f build/ota_data_initial.bin ] && cp build/ota_data_initial.bin release/ || echo "No ota_data_initial.bin"
        if [ -f build/flash_args ]; then
          cp build/flash_args release/
          # Generate a concise manifest with flash command
          echo "Flash command (Linux/macOS):" > release/FLASH_MANIFEST.txt
          echo "python -m esptool --chip esp32c6 $(tr '\n' ' ' < build/flash_args)" >> release/FLASH_MANIFEST.txt
        fi
        echo "Generated files:" && ls -1 release

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32c6-firmware
        path: release/